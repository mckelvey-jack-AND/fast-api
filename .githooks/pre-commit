#!/usr/bin/env bash

LC_ALL=C

local_branch="$(git rev-parse --abbrev-ref HEAD)"

valid_branch_regex="^(feature|bug|improvement|library|prerelease|release|hotfix)\/[a-z0-9._-]+\/[a-z0-9._-]+$"

message="There is something wrong with your branch name. Branch names in this project must adhere to this contract: $valid_branch_regex. Ex: feature/ons-38/create-project-setups. Your commit will be rejected. You should rename your branch to a valid name and try again."

if [[ ! $local_branch =~ $valid_branch_regex ]]
then
    echo "$message"
    exit 1
fi


#!/bin/sh
FILES=$(git diff --cached --name-only --diff-filter=ACMR | sed 's| |\\ |g')
[ -z "$FILES" ] && exit 0

# Prettify all selected files
echo "$FILES" | xargs ./frontend/node_modules/.bin/prettier --ignore-unknown --write --loglevel silent

# Add back the modified/prettified files to staging
echo "$FILES" | xargs git add

printf "\n\033[32m\xE2\x9C\x85 prettier \033[0m\n"




#!/bin/bash

# Paths are relative to the root of the git repository
cd backend && black ./app





#!/bin/bash
cd "$(git rev-parse --show-toplevel)"
ESLINT="./frontend/node_modules/.bin/eslint"

if [[ ! -x "$ESLINT" ]]; then
  printf "\t\033[41mPlease install ESlint\033[0m (npm install eslint)\n"
  exit 1
fi



STAGED_FILES=($(git diff --cached --name-only --diff-filter=ACM | grep ".jsx\{0,1\}$"))

if [[ "$STAGED_FILES" = "" ]]; then
  printf "\033[36m eslint skipped  (no files to check) \033[0m \n\n"
  exit 0
fi

$ESLINT "${STAGED_FILES[@]}" --fix

ESLINT_EXIT="$?"

# Re-add files since they may have been fixed
git add "${STAGED_FILES[@]}"

if [[ "${ESLINT_EXIT}" == 0 ]]; then
  printf "\033[32m\xE2\x9C\x85 eslint \033[0m \n\n"
else
  printf "\033[31m\xE2\x9D\x8C eslint \033[0m\n\n"
  exit 1
fi

exit $?

